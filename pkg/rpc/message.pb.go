// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/rpc/message.proto

package rpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Status int32

const (
	Status_FREE     Status = 0
	Status_USING    Status = 1
	Status_DELETING Status = 2
	Status_ERROR    Status = 3
	Status_DELETED  Status = 4
)

var Status_name = map[int32]string{
	0: "FREE",
	1: "USING",
	2: "DELETING",
	3: "ERROR",
	4: "DELETED",
}

var Status_value = map[string]int32{
	"FREE":     0,
	"USING":    1,
	"DELETING": 2,
	"ERROR":    3,
	"DELETED":  4,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}

func (Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d1cd29baafbbc565, []int{0}
}

type VxNet struct {
	ID                   string   `protobuf:"bytes,1,opt,name=ID,json=iD,proto3" json:"ID,omitempty"`
	Gateway              string   `protobuf:"bytes,2,opt,name=Gateway,json=gateway,proto3" json:"Gateway,omitempty"`
	Network              string   `protobuf:"bytes,3,opt,name=Network,json=network,proto3" json:"Network,omitempty"`
	RouterID             string   `protobuf:"bytes,4,opt,name=RouterID,json=routerID,proto3" json:"RouterID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VxNet) Reset()         { *m = VxNet{} }
func (m *VxNet) String() string { return proto.CompactTextString(m) }
func (*VxNet) ProtoMessage()    {}
func (*VxNet) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1cd29baafbbc565, []int{0}
}
func (m *VxNet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VxNet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VxNet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VxNet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VxNet.Merge(m, src)
}
func (m *VxNet) XXX_Size() int {
	return m.Size()
}
func (m *VxNet) XXX_DiscardUnknown() {
	xxx_messageInfo_VxNet.DiscardUnknown(m)
}

var xxx_messageInfo_VxNet proto.InternalMessageInfo

func (m *VxNet) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *VxNet) GetGateway() string {
	if m != nil {
		return m.Gateway
	}
	return ""
}

func (m *VxNet) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *VxNet) GetRouterID() string {
	if m != nil {
		return m.RouterID
	}
	return ""
}

type HostNic struct {
	VxNet                *VxNet   `protobuf:"bytes,1,opt,name=VxNet,json=vxNet,proto3" json:"VxNet,omitempty"`
	ID                   string   `protobuf:"bytes,2,opt,name=ID,json=iD,proto3" json:"ID,omitempty"`
	HardwareAddr         string   `protobuf:"bytes,3,opt,name=HardwareAddr,json=hardwareAddr,proto3" json:"HardwareAddr,omitempty"`
	PrimaryAddress       string   `protobuf:"bytes,4,opt,name=PrimaryAddress,json=primaryAddress,proto3" json:"PrimaryAddress,omitempty"`
	IsPrimary            bool     `protobuf:"varint,5,opt,name=IsPrimary,json=isPrimary,proto3" json:"IsPrimary,omitempty"`
	Using                bool     `protobuf:"varint,6,opt,name=Using,json=using,proto3" json:"Using,omitempty"`
	Reserved             bool     `protobuf:"varint,7,opt,name=Reserved,json=reserved,proto3" json:"Reserved,omitempty"`
	RouteTableNum        int32    `protobuf:"varint,8,opt,name=RouteTableNum,json=routeTableNum,proto3" json:"RouteTableNum,omitempty"`
	Status               Status   `protobuf:"varint,9,opt,name=Status,json=status,proto3,enum=rpc.Status" json:"Status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HostNic) Reset()         { *m = HostNic{} }
func (m *HostNic) String() string { return proto.CompactTextString(m) }
func (*HostNic) ProtoMessage()    {}
func (*HostNic) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1cd29baafbbc565, []int{1}
}
func (m *HostNic) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HostNic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HostNic.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HostNic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostNic.Merge(m, src)
}
func (m *HostNic) XXX_Size() int {
	return m.Size()
}
func (m *HostNic) XXX_DiscardUnknown() {
	xxx_messageInfo_HostNic.DiscardUnknown(m)
}

var xxx_messageInfo_HostNic proto.InternalMessageInfo

func (m *HostNic) GetVxNet() *VxNet {
	if m != nil {
		return m.VxNet
	}
	return nil
}

func (m *HostNic) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *HostNic) GetHardwareAddr() string {
	if m != nil {
		return m.HardwareAddr
	}
	return ""
}

func (m *HostNic) GetPrimaryAddress() string {
	if m != nil {
		return m.PrimaryAddress
	}
	return ""
}

func (m *HostNic) GetIsPrimary() bool {
	if m != nil {
		return m.IsPrimary
	}
	return false
}

func (m *HostNic) GetUsing() bool {
	if m != nil {
		return m.Using
	}
	return false
}

func (m *HostNic) GetReserved() bool {
	if m != nil {
		return m.Reserved
	}
	return false
}

func (m *HostNic) GetRouteTableNum() int32 {
	if m != nil {
		return m.RouteTableNum
	}
	return 0
}

func (m *HostNic) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_FREE
}

type PodInfo struct {
	Name                 string   `protobuf:"bytes,1,opt,name=Name,json=name,proto3" json:"Name,omitempty"`
	Namespace            string   `protobuf:"bytes,2,opt,name=Namespace,json=namespace,proto3" json:"Namespace,omitempty"`
	Containter           string   `protobuf:"bytes,3,opt,name=Containter,json=containter,proto3" json:"Containter,omitempty"`
	Netns                string   `protobuf:"bytes,4,opt,name=Netns,json=netns,proto3" json:"Netns,omitempty"`
	IfName               string   `protobuf:"bytes,5,opt,name=IfName,json=ifName,proto3" json:"IfName,omitempty"`
	NicType              string   `protobuf:"bytes,6,opt,name=NicType,json=nicType,proto3" json:"NicType,omitempty"`
	PodIP                string   `protobuf:"bytes,7,opt,name=PodIP,json=podIP,proto3" json:"PodIP,omitempty"`
	HostNic              string   `protobuf:"bytes,8,opt,name=HostNic,json=hostNic,proto3" json:"HostNic,omitempty"`
	VxNet                string   `protobuf:"bytes,9,opt,name=VxNet,json=vxNet,proto3" json:"VxNet,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PodInfo) Reset()         { *m = PodInfo{} }
func (m *PodInfo) String() string { return proto.CompactTextString(m) }
func (*PodInfo) ProtoMessage()    {}
func (*PodInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1cd29baafbbc565, []int{2}
}
func (m *PodInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PodInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PodInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PodInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodInfo.Merge(m, src)
}
func (m *PodInfo) XXX_Size() int {
	return m.Size()
}
func (m *PodInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PodInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PodInfo proto.InternalMessageInfo

func (m *PodInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PodInfo) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *PodInfo) GetContainter() string {
	if m != nil {
		return m.Containter
	}
	return ""
}

func (m *PodInfo) GetNetns() string {
	if m != nil {
		return m.Netns
	}
	return ""
}

func (m *PodInfo) GetIfName() string {
	if m != nil {
		return m.IfName
	}
	return ""
}

func (m *PodInfo) GetNicType() string {
	if m != nil {
		return m.NicType
	}
	return ""
}

func (m *PodInfo) GetPodIP() string {
	if m != nil {
		return m.PodIP
	}
	return ""
}

func (m *PodInfo) GetHostNic() string {
	if m != nil {
		return m.HostNic
	}
	return ""
}

func (m *PodInfo) GetVxNet() string {
	if m != nil {
		return m.VxNet
	}
	return ""
}

type IPAMMessage struct {
	Args                 *PodInfo `protobuf:"bytes,1,opt,name=Args,json=args,proto3" json:"Args,omitempty"`
	Nic                  *HostNic `protobuf:"bytes,2,opt,name=Nic,json=nic,proto3" json:"Nic,omitempty"`
	Peek                 bool     `protobuf:"varint,3,opt,name=Peek,json=peek,proto3" json:"Peek,omitempty"`
	Delete               bool     `protobuf:"varint,4,opt,name=Delete,json=delete,proto3" json:"Delete,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IPAMMessage) Reset()         { *m = IPAMMessage{} }
func (m *IPAMMessage) String() string { return proto.CompactTextString(m) }
func (*IPAMMessage) ProtoMessage()    {}
func (*IPAMMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1cd29baafbbc565, []int{3}
}
func (m *IPAMMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IPAMMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IPAMMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IPAMMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IPAMMessage.Merge(m, src)
}
func (m *IPAMMessage) XXX_Size() int {
	return m.Size()
}
func (m *IPAMMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_IPAMMessage.DiscardUnknown(m)
}

var xxx_messageInfo_IPAMMessage proto.InternalMessageInfo

func (m *IPAMMessage) GetArgs() *PodInfo {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *IPAMMessage) GetNic() *HostNic {
	if m != nil {
		return m.Nic
	}
	return nil
}

func (m *IPAMMessage) GetPeek() bool {
	if m != nil {
		return m.Peek
	}
	return false
}

func (m *IPAMMessage) GetDelete() bool {
	if m != nil {
		return m.Delete
	}
	return false
}

func init() {
	proto.RegisterEnum("rpc.Status", Status_name, Status_value)
	proto.RegisterType((*VxNet)(nil), "rpc.VxNet")
	proto.RegisterType((*HostNic)(nil), "rpc.HostNic")
	proto.RegisterType((*PodInfo)(nil), "rpc.PodInfo")
	proto.RegisterType((*IPAMMessage)(nil), "rpc.IPAMMessage")
}

func init() { proto.RegisterFile("pkg/rpc/message.proto", fileDescriptor_d1cd29baafbbc565) }

var fileDescriptor_d1cd29baafbbc565 = []byte{
	// 590 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0xcd, 0x6a, 0xdb, 0x4c,
	0x14, 0x8d, 0x64, 0xfd, 0x5e, 0x3b, 0xc6, 0x0c, 0xf9, 0x3e, 0x44, 0x28, 0xc6, 0xb8, 0xa5, 0x98,
	0x2e, 0x12, 0x70, 0x9f, 0xc0, 0x89, 0xdc, 0x44, 0xd0, 0xa8, 0x66, 0x92, 0x74, 0x3f, 0x91, 0x6e,
	0x14, 0xe1, 0x58, 0x12, 0x33, 0xe3, 0xa4, 0xa1, 0x2f, 0xd2, 0x75, 0x9f, 0xa6, 0xcb, 0x3e, 0x42,
	0x71, 0x57, 0x7d, 0x8b, 0x32, 0xa3, 0x71, 0x70, 0xe9, 0xaa, 0x2b, 0x71, 0xce, 0xbd, 0x9a, 0x7b,
	0xcf, 0x39, 0x33, 0xf0, 0x5f, 0xb3, 0x2c, 0x8e, 0x79, 0x93, 0x1d, 0xaf, 0x50, 0x08, 0x56, 0xe0,
	0x51, 0xc3, 0x6b, 0x59, 0x93, 0x0e, 0x6f, 0xb2, 0x71, 0x01, 0xee, 0xc7, 0x4f, 0x29, 0x4a, 0xd2,
	0x07, 0x3b, 0x89, 0x23, 0x6b, 0x64, 0x4d, 0x42, 0x6a, 0x97, 0x31, 0x89, 0xc0, 0x3f, 0x63, 0x12,
	0x1f, 0xd9, 0x53, 0x64, 0x6b, 0xd2, 0x2f, 0x5a, 0xa8, 0x2a, 0x29, 0xca, 0xc7, 0x9a, 0x2f, 0xa3,
	0x4e, 0x5b, 0xa9, 0x5a, 0x48, 0x0e, 0x21, 0xa0, 0xf5, 0x5a, 0x22, 0x4f, 0xe2, 0xc8, 0xd1, 0xa5,
	0x80, 0x1b, 0x3c, 0xfe, 0x6a, 0x83, 0x7f, 0x5e, 0x0b, 0x99, 0x96, 0x19, 0x19, 0x99, 0xa1, 0x7a,
	0x5c, 0x77, 0x0a, 0x47, 0xbc, 0xc9, 0x8e, 0x34, 0x43, 0xdd, 0x87, 0x9d, 0x6d, 0xec, 0xe7, 0x6d,
	0xc6, 0xd0, 0x3b, 0x67, 0x3c, 0x7f, 0x64, 0x1c, 0x67, 0x79, 0xce, 0xcd, 0xe0, 0xde, 0xdd, 0x0e,
	0x47, 0x5e, 0x43, 0x7f, 0xc1, 0xcb, 0x15, 0xe3, 0x4f, 0x0a, 0xa2, 0x10, 0x66, 0x87, 0x7e, 0xf3,
	0x07, 0x4b, 0x5e, 0x40, 0x98, 0x08, 0xd3, 0x19, 0xb9, 0x23, 0x6b, 0x12, 0xd0, 0xb0, 0xdc, 0x12,
	0xe4, 0x00, 0xdc, 0x6b, 0x51, 0x56, 0x45, 0xe4, 0xe9, 0x8a, 0xbb, 0x56, 0x40, 0x2b, 0x43, 0x81,
	0xfc, 0x01, 0xf3, 0xc8, 0xd7, 0x85, 0x80, 0x1b, 0x4c, 0x5e, 0xc1, 0xbe, 0x56, 0x7d, 0xc5, 0x6e,
	0xee, 0x31, 0x5d, 0xaf, 0xa2, 0x60, 0x64, 0x4d, 0x5c, 0xba, 0xcf, 0x77, 0x49, 0xf2, 0x12, 0xbc,
	0x4b, 0xc9, 0xe4, 0x5a, 0x44, 0xe1, 0xc8, 0x9a, 0xf4, 0xa7, 0x5d, 0x2d, 0xba, 0xa5, 0xa8, 0x27,
	0xf4, 0x77, 0xfc, 0xcb, 0x02, 0x7f, 0x51, 0xe7, 0x49, 0x75, 0x5b, 0x13, 0x02, 0x4e, 0xca, 0x56,
	0x68, 0x22, 0x71, 0x2a, 0xb6, 0x42, 0xb5, 0xba, 0xe2, 0x44, 0xc3, 0x32, 0x34, 0xee, 0x84, 0xd5,
	0x96, 0x20, 0x43, 0x80, 0xd3, 0xba, 0x92, 0xac, 0xac, 0x24, 0x6e, 0x2d, 0x82, 0xec, 0x99, 0x51,
	0xd2, 0x52, 0x94, 0xd5, 0xd6, 0x17, 0xb7, 0x52, 0x80, 0xfc, 0x0f, 0x5e, 0x72, 0xab, 0x27, 0xb9,
	0x9a, 0xf6, 0x4a, 0x8d, 0x74, 0xcc, 0x65, 0x76, 0xf5, 0xd4, 0xa0, 0xb6, 0x42, 0xc5, 0xdc, 0x42,
	0x75, 0x8e, 0x5a, 0x72, 0xa1, 0x9d, 0x08, 0xa9, 0xdb, 0x28, 0xa0, 0xfa, 0x4d, 0xbe, 0xda, 0x80,
	0x90, 0xfa, 0x77, 0x26, 0xee, 0x83, 0x6d, 0xdc, 0x61, 0xdb, 0xaf, 0x23, 0x1e, 0x7f, 0x86, 0x6e,
	0xb2, 0x98, 0x5d, 0x5c, 0xb4, 0x77, 0x92, 0x8c, 0xc0, 0x99, 0xf1, 0x42, 0x98, 0x2b, 0xd1, 0xd3,
	0xee, 0x18, 0x2b, 0xa8, 0xc3, 0x78, 0x21, 0xc8, 0x10, 0x3a, 0xea, 0x70, 0x7b, 0xa7, 0xc1, 0x0c,
	0xa4, 0x9d, 0xaa, 0xcc, 0x94, 0x61, 0x0b, 0xc4, 0xf6, 0x52, 0x06, 0xd4, 0x69, 0x10, 0x97, 0x4a,
	0x5c, 0x8c, 0xf7, 0x28, 0x51, 0x6b, 0x0e, 0xa8, 0x97, 0x6b, 0xf4, 0xe6, 0x74, 0x9b, 0x06, 0x09,
	0xc0, 0x79, 0x47, 0xe7, 0xf3, 0xc1, 0x1e, 0x09, 0xc1, 0xbd, 0xbe, 0x4c, 0xd2, 0xb3, 0x81, 0x45,
	0x7a, 0x10, 0xc4, 0xf3, 0xf7, 0xf3, 0x2b, 0x85, 0x6c, 0x55, 0x98, 0x53, 0xfa, 0x81, 0x0e, 0x3a,
	0xa4, 0x0b, 0xbe, 0x2e, 0xcc, 0xe3, 0x81, 0x33, 0x95, 0x00, 0xa7, 0x69, 0x72, 0xc2, 0xb2, 0x25,
	0x56, 0x39, 0x99, 0x02, 0xcc, 0xf2, 0xdc, 0xbc, 0x0c, 0x32, 0xd0, 0xfb, 0xed, 0x08, 0x3c, 0xfc,
	0x8b, 0x19, 0xef, 0xa9, 0x7f, 0x62, 0xbc, 0xff, 0xa7, 0x7f, 0x4e, 0x06, 0xdf, 0x36, 0x43, 0xeb,
	0xfb, 0x66, 0x68, 0xfd, 0xd8, 0x0c, 0xad, 0x2f, 0x3f, 0x87, 0x7b, 0x37, 0x9e, 0x7e, 0xcf, 0x6f,
	0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0xce, 0x13, 0x81, 0x31, 0xe8, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CNIBackendClient is the client API for CNIBackend service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CNIBackendClient interface {
	AddNetwork(ctx context.Context, in *IPAMMessage, opts ...grpc.CallOption) (*IPAMMessage, error)
	DelNetwork(ctx context.Context, in *IPAMMessage, opts ...grpc.CallOption) (*IPAMMessage, error)
}

type cNIBackendClient struct {
	cc *grpc.ClientConn
}

func NewCNIBackendClient(cc *grpc.ClientConn) CNIBackendClient {
	return &cNIBackendClient{cc}
}

func (c *cNIBackendClient) AddNetwork(ctx context.Context, in *IPAMMessage, opts ...grpc.CallOption) (*IPAMMessage, error) {
	out := new(IPAMMessage)
	err := c.cc.Invoke(ctx, "/rpc.CNIBackend/AddNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cNIBackendClient) DelNetwork(ctx context.Context, in *IPAMMessage, opts ...grpc.CallOption) (*IPAMMessage, error) {
	out := new(IPAMMessage)
	err := c.cc.Invoke(ctx, "/rpc.CNIBackend/DelNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CNIBackendServer is the server API for CNIBackend service.
type CNIBackendServer interface {
	AddNetwork(context.Context, *IPAMMessage) (*IPAMMessage, error)
	DelNetwork(context.Context, *IPAMMessage) (*IPAMMessage, error)
}

// UnimplementedCNIBackendServer can be embedded to have forward compatible implementations.
type UnimplementedCNIBackendServer struct {
}

func (*UnimplementedCNIBackendServer) AddNetwork(ctx context.Context, req *IPAMMessage) (*IPAMMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNetwork not implemented")
}
func (*UnimplementedCNIBackendServer) DelNetwork(ctx context.Context, req *IPAMMessage) (*IPAMMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelNetwork not implemented")
}

func RegisterCNIBackendServer(s *grpc.Server, srv CNIBackendServer) {
	s.RegisterService(&_CNIBackend_serviceDesc, srv)
}

func _CNIBackend_AddNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPAMMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CNIBackendServer).AddNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.CNIBackend/AddNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CNIBackendServer).AddNetwork(ctx, req.(*IPAMMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _CNIBackend_DelNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPAMMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CNIBackendServer).DelNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.CNIBackend/DelNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CNIBackendServer).DelNetwork(ctx, req.(*IPAMMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _CNIBackend_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.CNIBackend",
	HandlerType: (*CNIBackendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddNetwork",
			Handler:    _CNIBackend_AddNetwork_Handler,
		},
		{
			MethodName: "DelNetwork",
			Handler:    _CNIBackend_DelNetwork_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/rpc/message.proto",
}

func (m *VxNet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VxNet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VxNet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RouterID) > 0 {
		i -= len(m.RouterID)
		copy(dAtA[i:], m.RouterID)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.RouterID)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Network) > 0 {
		i -= len(m.Network)
		copy(dAtA[i:], m.Network)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Network)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Gateway) > 0 {
		i -= len(m.Gateway)
		copy(dAtA[i:], m.Gateway)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Gateway)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HostNic) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HostNic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HostNic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x48
	}
	if m.RouteTableNum != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.RouteTableNum))
		i--
		dAtA[i] = 0x40
	}
	if m.Reserved {
		i--
		if m.Reserved {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.Using {
		i--
		if m.Using {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.IsPrimary {
		i--
		if m.IsPrimary {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.PrimaryAddress) > 0 {
		i -= len(m.PrimaryAddress)
		copy(dAtA[i:], m.PrimaryAddress)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.PrimaryAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.HardwareAddr) > 0 {
		i -= len(m.HardwareAddr)
		copy(dAtA[i:], m.HardwareAddr)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.HardwareAddr)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0x12
	}
	if m.VxNet != nil {
		{
			size, err := m.VxNet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PodInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PodInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PodInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.VxNet) > 0 {
		i -= len(m.VxNet)
		copy(dAtA[i:], m.VxNet)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.VxNet)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.HostNic) > 0 {
		i -= len(m.HostNic)
		copy(dAtA[i:], m.HostNic)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.HostNic)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.PodIP) > 0 {
		i -= len(m.PodIP)
		copy(dAtA[i:], m.PodIP)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.PodIP)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.NicType) > 0 {
		i -= len(m.NicType)
		copy(dAtA[i:], m.NicType)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.NicType)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.IfName) > 0 {
		i -= len(m.IfName)
		copy(dAtA[i:], m.IfName)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.IfName)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Netns) > 0 {
		i -= len(m.Netns)
		copy(dAtA[i:], m.Netns)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Netns)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Containter) > 0 {
		i -= len(m.Containter)
		copy(dAtA[i:], m.Containter)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Containter)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IPAMMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IPAMMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IPAMMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Delete {
		i--
		if m.Delete {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Peek {
		i--
		if m.Peek {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Nic != nil {
		{
			size, err := m.Nic.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Args != nil {
		{
			size, err := m.Args.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMessage(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *VxNet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Gateway)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Network)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.RouterID)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HostNic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VxNet != nil {
		l = m.VxNet.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.HardwareAddr)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.PrimaryAddress)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.IsPrimary {
		n += 2
	}
	if m.Using {
		n += 2
	}
	if m.Reserved {
		n += 2
	}
	if m.RouteTableNum != 0 {
		n += 1 + sovMessage(uint64(m.RouteTableNum))
	}
	if m.Status != 0 {
		n += 1 + sovMessage(uint64(m.Status))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PodInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Containter)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Netns)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.IfName)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.NicType)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.PodIP)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.HostNic)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.VxNet)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IPAMMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Args != nil {
		l = m.Args.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Nic != nil {
		l = m.Nic.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Peek {
		n += 2
	}
	if m.Delete {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMessage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessage(x uint64) (n int) {
	return sovMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *VxNet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VxNet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VxNet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateway", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gateway = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Network = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouterID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RouterID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HostNic) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HostNic: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HostNic: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VxNet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VxNet == nil {
				m.VxNet = &VxNet{}
			}
			if err := m.VxNet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HardwareAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HardwareAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrimaryAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPrimary", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPrimary = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Using", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Using = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reserved", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Reserved = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteTableNum", wireType)
			}
			m.RouteTableNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RouteTableNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PodInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PodInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PodInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Containter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Containter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Netns", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Netns = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IfName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IfName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NicType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NicType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodIP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodIP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostNic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostNic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VxNet", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VxNet = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IPAMMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IPAMMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IPAMMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Args == nil {
				m.Args = &PodInfo{}
			}
			if err := m.Args.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Nic == nil {
				m.Nic = &HostNic{}
			}
			if err := m.Nic.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peek", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Peek = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delete", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Delete = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessage = fmt.Errorf("proto: unexpected end of group")
)
